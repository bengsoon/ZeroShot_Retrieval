# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_helper.ipynb.

# %% auto 0
__all__ = ['setup_mlflow', 'log_artifact', 'search_runs', 'get_mlflow_model', 'register_model', 'get_latest_registered_model',
           'view_df', 'get_now', 'get_today']

# %% ../nbs/00_helper.ipynb 4
from loguru import logger
import os
from pathlib import Path
from fastcore.basics import patch_to, patch

import mlflow
from mlflow import MlflowClient
from mlflow.entities import ViewType

import pandas as pd

from typing import Union, List

from datetime import datetime

# %% ../nbs/00_helper.ipynb 6
def setup_mlflow(tracking_uri: str, # MLflow server tracking uri
                 experiment_id: Union[str, int], # Experiment name / ID 
) -> None:
    "MLflow set up."

    mlflow.set_tracking_uri(tracking_uri)
    mlflow.set_experiment(experiment_id)
    logger.info(f"Set MLflow experiment to {experiment_id}.")

# %% ../nbs/00_helper.ipynb 8
def log_artifact(file: str, # path of the file to save
                 artifact_path: str, # artifact path in mlflow 
                 run_id:str = None # run id to save the artifact. will create new run_id if None
                ):
    # logs a serialized artifact to MLflow
    with mlflow.start_run(run_id):
        mlflow.log_artifact(file, artifact_path)  

# %% ../nbs/00_helper.ipynb 10
def search_runs(
    filter_string: str, #  Filter query string, defaults to searching all runs.
    experiment_ids: Union[List[int], int] = 1,  # List of experiment IDs, or a single int or string id.
    max_results: int = None, # Maximum number of runs desired.
    order: str =None # List of columns to order by (e.g., “metrics.rmse”). Can contain optional DESC or ASC value. Default value ASC.
) -> List:
    " wrapper function for [mlflow.client.MlflowClient.search_runs](https://mlflow.org/docs/latest/python_api/mlflow.client.html#mlflow.client.MlflowClient.search_runs) "
    
    results = MlflowClient().search_runs(
        experiment_ids=str(experiment_ids),
        filter_string=filter_string,
        run_view_type=ViewType.ACTIVE_ONLY,
        max_results=max_results,
        order_by=order
        )
    
    run_ids = []

    for no, run in enumerate(results):
        logger.info(f"Run {no}: {run.info.run_id}")
        run_ids.append(run.info.run_id)
    return run_ids

# %% ../nbs/00_helper.ipynb 13
def get_mlflow_model(run_id:str, # Run ID where artifact is stored
                     artifact_name:str, # name of the artifact
                     artifact_path:str="models" # Path of the artifact within the run
                    ) -> str:
    "Retrieves MLflow artifact path."
    
    model_path = Path(mlflow.artifacts.download_artifacts(run_id=run_id, artifact_path=artifact_path))
    artifact_path = model_path / artifact_name
    
    return str(model_path / artifact_name)

# %% ../nbs/00_helper.ipynb 17
def register_model(run_id: str, # Run ID from MLflow where model resides (eg `73ab5c472b574813a18be82f5395c546`)
                   model_path: str, # Path of the model (eg `setfit_preliminary.pkl`)
                   model_name: str, # Name of the model
                  ):
    mlflow.register_model(f"runs:/{run_id}/{model_path}", model_name)

# %% ../nbs/00_helper.ipynb 18
#TODO
def get_latest_registered_model(name: str, # Name of the registered model,
                                only_run_id: bool = True # returns only `run_id` rather than path to model artifact
                               ):
    if only_run_id:
        return MlflowClient().get_latest_versions(name)[0].run_id
    else:
        return MlflowClient().get_latest_versions(name)[0].source.replace("file://", "")
    

# %% ../nbs/00_helper.ipynb 20
def view_df(df: "pd.DataFrame", # Pandas DataFrame to be viewed
            min_rows: int = 60, # minimum row 
            max_colswidth: int = 500, # maximum width of the column
            max_cols: int = None # maximum columns
           ):
    "View dataframe in full columns in Jupyter! If `max_cols==None`, it will show the full column."
    
    with pd.option_context('display.max_columns', max_cols, 'display.min_rows', min_rows, 'display.max_colwidth', max_colswidth):
        display(df)

# %% ../nbs/00_helper.ipynb 22
def get_now():
    " Returns the time now in 'yyyy-mm-dd_HHMMSS"
    return datetime.now().strftime("%Y%m%d_%H%M%S")

# %% ../nbs/00_helper.ipynb 24
def get_today(fmt="%Y-%m-%d"):
    " Returns today's date (default format: 'yyyy-mm-dd')"
    return datetime.today().strftime(fmt)
